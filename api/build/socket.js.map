{"version":3,"sources":["../src/socket.js"],"names":["rooms","initSocket","server","io","SocketIO","set","on","socket","console","log","timeout","attemptNumber","data","nickname","mode","room","created","players","player","id","order","victoryCount","connected","roomID","join","push","emit","started","length","sort","a","b","i","map","x","nbDominos","broadcast","to","setTimeout","hands","board","currentOrder","hand","playerID","find","splice","indexOf","boudeCount","domino","toLeft","winner","unshift","count","p","playerCount","reduce","acc","left","right","nextPlayer"],"mappings":"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","sourcesContent":["import SocketIO from 'socket.io'\r\nimport { v4 as uuid4 } from 'uuid'\r\nimport { startGame } from './gameEngine'\r\n\r\nconst rooms = []\r\n\r\nexport const initSocket = (server) => {\r\n  const io = new SocketIO(server)\r\n  io.set('origins', 'http://localhost:8080')\r\n\r\n  io.on('connection', (socket) => {\r\n    console.log('a new socket client is connected')\r\n\r\n    socket.on('connect_timeout', (timeout) => {\r\n      console.log('connection timeout')\r\n    })\r\n    socket.on('reconnect_attempt', (attemptNumber) => {\r\n      console.log('reconnection attempt')\r\n    })\r\n    socket.on('disconnect', (data) => {\r\n      console.log('socket is disconnected')\r\n      // const { roomID, order } = data \r\n\r\n      // socket.broadcast.to(roomID).emit('onPlayerDisconnected', order)\r\n    })\r\n\r\n    socket.on('createNewGame', (data) => {\r\n      console.log('game creation request')\r\n\r\n      const { nickname, mode } = data\r\n      const room = {\r\n        created: true,\r\n        players: [],\r\n        mode\r\n      }\r\n      const player = {\r\n        id: uuid4(),\r\n        socket,\r\n        nickname,\r\n        order: 1,\r\n        victoryCount: 0,\r\n        connected: true\r\n      }\r\n      const roomID = uuid4()\r\n\r\n      socket.join(roomID)\r\n\r\n      room.players.push(player)\r\n\r\n      rooms[roomID] = room\r\n\r\n      socket.emit('onGameCreated', {\r\n        room: roomID,\r\n        order: player.order,\r\n        id: player.id\r\n      })\r\n    })\r\n\r\n    socket.on('joinGame', (data) => {\r\n      const { roomID, nickname } = data\r\n      const room = rooms[roomID]\r\n\r\n      if (!room) {\r\n        console.log('no room available')\r\n        socket.emit('onGameNotFound')\r\n      } else if (room.started || room.players.length === room.mode) {\r\n        console.log('join request : game started')\r\n        socket.emit('onGameAlreadyStarted')\r\n      } else {\r\n        console.log('new player joined')\r\n        // todo : vérifier salle pleine avec length des sockets\r\n        socket.join(roomID)\r\n\r\n        const player = {\r\n          id: uuid4(),\r\n          socket,\r\n          nickname,\r\n          victoryCount: 0,\r\n          connected: true\r\n        }\r\n\r\n        room.players.sort((a, b) => a.order - b.order)\r\n\r\n        for (let i = 0; i < room.mode; i++) {\r\n          if (room.players[i]) {\r\n            if (!room.players[i + 1]) {\r\n              player.order = room.players[i].order + 1\r\n              break\r\n            } else if (room.players[i + 1].order !== room.players[i].order + 1) {\r\n              player.order = room.players[i].order + 1\r\n              break\r\n            }\r\n          } else {\r\n            console.log('impossible')\r\n          } \r\n        }\r\n\r\n        console.log('order : ' + player.order)\r\n        \r\n        socket.emit('onGameJoined', {\r\n          players: room.players.map(x => { return { id: x.id, nickname: x.nickname, order: x.order, nbDominos: 7 } }),\r\n          order: player.order,\r\n          id: player.id\r\n        })\r\n\r\n        room.players.push(player)\r\n\r\n        socket.broadcast.to(roomID).emit('onNewPlayer', { id: player.id, nickname: player.nickname, order: player.order, nbDominos: 7 })\r\n\r\n        if (room.players.length === room.mode) {\r\n          setTimeout(() => {\r\n            console.log('game started')\r\n      \r\n            const hands = startGame()\r\n            \r\n            room.started = true\r\n            room.board = []\r\n            room.currentOrder = 1 // todo : remplacer par aléatoire\r\n      \r\n            for (let i = 0; i < room.players.length; i++) {\r\n              room.players[i].hand = hands[i]\r\n              room.players[i].socket.emit('onGameStarted', { hand: hands[i]})\r\n            }\r\n          }, 1000);\r\n        }\r\n      }\r\n    })\r\n\r\n    socket.on('leaveGame', (data) => {\r\n      const { roomID, playerID } = data\r\n      const room = rooms[roomID]\r\n\r\n      if (room) {\r\n        const player = room.players.find(x => x.id === playerID)\r\n\r\n        if (player) {\r\n          if (room.started) {\r\n            player.connected = false\r\n            if (room.currentOrder === player.order) {\r\n              // todo : activate bot and play immediately\r\n            }\r\n          } else {\r\n            room.players.splice(room.players.indexOf(player), 1)\r\n            socket.broadcast.to(roomID).emit('onPlayerLeft', playerID)\r\n          }\r\n        }\r\n      }\r\n    })\r\n\r\n    socket.on('resumeGame', (data) => {\r\n      const { roomID, playerID } = data\r\n      const room = rooms[roomID]\r\n\r\n      console.log('game resumed : ' + playerID)\r\n\r\n      if (room) {\r\n        const player = room.players.find(x => x.id === playerID)\r\n\r\n        if (player) {\r\n          player.connected = true\r\n          socket.join(roomID)\r\n        \r\n          socket.emit('onGameResumed', {\r\n            board: room.board,\r\n            players: room.players.map(x => {\r\n              if (x.id !== playerID) {\r\n                return { id: x.id, nickname: x.nickname, order: x.order, nbDominos: x.hand ? x.hand.length : 7 }\r\n              }\r\n            }),\r\n            hand: player.hand,\r\n            order: player.order,\r\n            currentOrder: room.currentOrder\r\n          })\r\n          // vérifier si c'est son tour ?        \r\n        } else {\r\n          socket.emit('onGameAlreadyStarted')\r\n        }\r\n      } else {\r\n        console.log('this room does not exist')\r\n      }\r\n    })\r\n\r\n    socket.on('startGame', (roomID) => {\r\n      console.log('game started')\r\n      \r\n      const hands = startGame()\r\n      const room = rooms[roomID]\r\n\r\n      if (!room) { return }\r\n      \r\n      room.started = true\r\n      room.board = []\r\n      room.currentOrder = 1 // todo : remplacer par aléatoire\r\n      room.boudeCount = 0\r\n\r\n      for (let i = 0; i < room.players.length; i++) {\r\n        const player = room.players[i]\r\n\r\n        player.hand = hands[i]\r\n        player.socket.emit('onGameStarted', { hand: hands[i]})\r\n        \r\n      }\r\n      // // TODO : create logic in client game app to choose first player (for now, it's always the room's owner)\r\n    })\r\n\r\n    socket.on('playDomino', (data) => {\r\n      console.log('domino played')\r\n    \r\n      const { roomID, playerID, domino, toLeft } = data\r\n      const room = rooms[roomID]\r\n      const player = room.players.find(x => x.id === playerID)\r\n      const winner = null\r\n\r\n      if(!player) { return }\r\n\r\n      if (domino) {\r\n        room.boudeCount = 0\r\n\r\n        toLeft ?\r\n          room.board.unshift(domino) :\r\n          room.board.push(domino)\r\n\r\n        room.currentOrder === room.mode ?\r\n          room.currentOrder = 1 :\r\n          room.currentOrder += 1\r\n\r\n        player.hand.splice(player.hand.indexOf(domino), 1)\r\n\r\n        if (player.hand.length === 0) {\r\n          room.started = false\r\n          io.to(roomID).emit('onGameFinished', playerID)\r\n        }\r\n      } else {\r\n        console.log('joueur boudé : ' + player.order)\r\n        room.boudeCount += 1\r\n\r\n        if (room.boudeCount === room.mode) {\r\n          const count = 200\r\n\r\n          room.players.map((p) => {\r\n            const playerCount = p.hand.reduce((acc, x) => acc + x.left + x.right)\r\n            if (playerCount < count) {\r\n              count = playerCount\r\n              winner = p.id\r\n            }\r\n          })\r\n\r\n          room.started = false\r\n          io.to(roomID).emit('onGameFinished', winner)\r\n          // TODO : proposer aux joueurs de refaire une partie\r\n        }\r\n      }\r\n\r\n      if (!winner) {\r\n        socket.broadcast.to(roomID).emit('onNewDomino', { domino, toLeft, id: playerID })\r\n\r\n        const nextPlayer = room.players.find(x => x.order === room.currentOrder)\r\n  \r\n        if (!nextPlayer.connected) {\r\n          // todo : play again if next player is disconnected        \r\n        }\r\n      }\r\n    })\r\n  })\r\n}"],"file":"socket.js"}